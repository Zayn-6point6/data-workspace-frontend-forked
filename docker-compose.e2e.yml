version: "3.4"
services:

  data-workspace:
    build:
      context: .
      dockerfile: Dockerfile
      target: e2e
    ports:
      - "8000:8000"
      - "4444:4444"
    env_file: .envs/test-e2e.env      
    depends_on:
      - data-workspace-postgres
      - data-workspace-redis
    volumes:
      - .:/app
      - ./dataworkspace:/dataworkspace
      - ./dataworkspace/dataworkspace/static/js/stats:/dataworkspace/dataworkspace/static/js/stats/
    hostname: dataworkspace.test
    extra_hosts:
      - "dataworkspace.test:127.0.0.1"


  data-workspace-celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    env_file: .envs/test-e2e.env
    command: "/dataworkspace/start-celery-dev.sh"
    volumes:
      - ./dataworkspace:/dataworkspace
      - db-logs-dev:/var/log/postgres

  data-workspace-postgres:
    build:
      context: postgres
      dockerfile: Dockerfile
    image: data-workspace-postgres
    ports:
      - "5432:5432"
    volumes:
      - db-data-dev:/var/lib/postgresql/data
      - db-logs-dev:/var/log/postgres

  data-workspace-redis:
    build:
      context: redis
      dockerfile: Dockerfile
    ports:
      - "6379:6379"

  data-workspace-es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    environment:
      - discovery.type=single-node
      - http.port=9200
    ports:
      - "9200:9200"

  data-workspace-sso.test:
    build: https://github.com/uktrade/mock-sso.git
    environment:
      - MOCK_SSO_PORT=8081
      - MOCK_SSO_TOKEN=bar
      - MOCK_SSO_CODE=fizz
    ports:
      - "8081:8081"

  data-workspace-cypress:
    build:
      context: cypress
      dockerfile: Dockerfile
    volumes:
      - ./cypress:/app/cypress
      - ./cypress.config.ts:/app/cypress.config.ts
    depends_on:
      - data-workspace
    environment:
      - CYPRESS_baseUrl=http://dataworkspace.test:8000 #Todo update config in cypress to read this
    entrypoint: dockerize -wait tcp://data-workspace:8000 -timeout 3m -wait-retry-interval 5s
    command: npm run cypress:run

volumes:  
  db-data-dev:
  db-logs-dev:
  dataworkspace:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/dataworkspace  
  app:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}
